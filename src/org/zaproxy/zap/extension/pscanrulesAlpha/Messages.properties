# This file defines the default (English) variants of all of the internationalised messages

pscanalpha.usercontrolledopenredirect.name=Open redirect
pscanalpha.usercontrolledopenredirect.desc=Open redirects are one of the OWASP 2010 Top Ten vulnerabilities. This check looks at user-supplied input in query string parameters and POST data to identify where open redirects might be possible. Open redirects occur when an application allows user-supplied input (e.g. http://nottrusted.com) to control an offsite redirect. This is generally a pretty accurate way to find where 301 or 302 redirects could be exploited by spammers or phishing attacks
pscanalpha.usercontrolledopenredirect.soln=To avoid the open redirect vulnerability, parameters of the application script/program must be validated before sending 302 HTTP code (redirect) to the client browser. Implement safe redirect functionality that only redirects to relative URI's, or a list of trusted domains
pscanalpha.usercontrolledopenredirect.exploit=An attacker could supply a user with the following link: http://example.com/example.php?url=http://malicious.example.com
pscanalpha.usercontrolledopenredirect.refs=https://www.owasp.org/index.php/Open_redirect\nhttps://owasp.org/index.php/Top_10_2010-A10-Unvalidated_Redirects_and_Forwards\nhttps://cwe.mitre.org/data/definitions/601.html
pscanalpha.usercontrolledopenredirect.extrainfo.get=The 301 or 302 response to a request for the following URL appeared to contain user input in the location header:\r\n\r\n
pscanalpha.usercontrolledopenredirect.extrainfo.post=An open redirect controlled by POST parameters was detected. To test if this is a more serious issue, you should try resending that request as a GET, with the POST parameter included as a query string parameter. For example: http://nottrusted.com/page?url=http://lookout.net.\r\n\r\nThe 301 or 302 response to a request for the following URL appeared to contain user input in the location header:\r\n\r\n
pscanalpha.usercontrolledopenredirect.extrainfo.common={1}\r\n\r\nThe user input found was:\r\n\r\n{2}={3}\r\n\r\nThe context was:\r\n\r\n{4}

pscanalpha.usercontrolledcookie.name=Cookie poisoning
pscanalpha.usercontrolledcookie.desc=This check looks at user-supplied input in query string parameters and POST data to identify where cookie parameters might be controlled. This is called a cookie poisoning attack, and becomes exploitable when an attacker can manipulate the cookie in various ways. In some cases this will not be exploitable, however, allowing URL parameters to set cookie values is generally considered a bug.
pscanalpha.usercontrolledcookie.refs=http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-cookie
pscanalpha.usercontrolledcookie.soln=Do not allow user input to control cookie names and values. If some query string parameters must be set in cookie values, be sure to filter out semicolon's that can serve as name/value pair delimiters.
pscanalpha.usercontrolledcookie.exploit.get=An attacker may be able to poison cookie values through URL parameters.  Try injecting a semicolon to see if you can add cookie values (e.g. name=controlledValue;name=anotherValue;).
pscanalpha.usercontrolledcookie.exploit.post=An attacker may be able to poison cookie values through POST parameters. To test if this is a more serious issue, you should try resending that request as a GET, with the POST parameter included as a query string parmeter. For example:  http://nottrusted.com/page?value=maliciousInput.\r\n\r\n
pscanalpha.usercontrolledcookie.extraInfo=This was identified at:\r\n\r\n{1}\r\n\r\nUser-input was found in the following cookie:\r\n{1}\r\n\r\nThe user input was:\r\n{2}={3}

pscanalpha.usercontrolledcharset.name=User controllable charset
pscanalpha.usercontrolledcharset.desc=This check looks at user-supplied input in query string parameters and POST data to identify where Content-Type or meta tag charset declarations might be user-controlled. Such charset declarations should always be declared by the application. If an attacker can control the response charset, they could manipulate the HTML to perform XSS or other attacks.
pscanalpha.usercontrolledcharset.refs=
pscanalpha.usercontrolledcharset.soln=Force UTF-8 in all charset declarations. If user-input is required to decide a charset declaration, ensure that only an allowed list is used.
pscanalpha.usercontrolledcharset.exploit=An attacker controlling the <meta> element charset value is able to declare UTF-7 and is also able to include enough user-controlled payload early in the HTML document to have it interpreted as UTF-7. By encoding their payload with UTF-7 the attacker is able to bypass any server-side XSS protections and embed script in the page.
pscanalpha.usercontrolledcharset.extraInfo=A(n) [{1}] tag [{2}] attribute\r\n\r\nThe user input found was:\r\n{3}={4}\r\n\r\nThe charset value it controlled was:\r\n{5}