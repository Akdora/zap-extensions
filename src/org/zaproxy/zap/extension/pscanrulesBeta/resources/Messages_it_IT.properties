#X-Generator: crowdin.net
# This file defines the default (English) variants of all of the internationalised messages

pscanbeta.desc=Passive Scan Rules - beta

pscanbeta.authenticationcredentialscaptured.name=Credenziali di autenticazione catturate
pscanbeta.authenticationcredentialscaptured.desc=E' in uso un meccanismo di autenticazione insicuro. Questo permette ad un attaccante sulla rete di accedere all'userid e password dell'utente autenticato. Per un'autenticazione di base, l'attaccante deve meramente monitorare il traffico di rete finch\u00e9 una richiesta di autenticazione di base \u00e8 ricevuta, e poi decodificare l'username e la password in base64. Per l'autenticazione Digest, l'attaccante ha accesso al nome utente e possibilmente anche alla password, se l'hash (che include un nonce) pu\u00f2 essere craccato con successo, o se viene sferrato un attacco Man-In-The-Middle.
pscanbeta.authenticationcredentialscaptured.soln=Utilizza HTTPS e un meccanismo di autenticazione sicura che non invia la userid o la password in modo non crittografato. In particolare, evita l'uso del meccanismo di autenticazione di base, poich\u00e9 questo banale meccanismo di offuscamento \u00e8 facilmente decifrabile.
pscanbeta.authenticationcredentialscaptured.refs=https\://www.owasp.org/index.php/Top_10_2010-a3 https\://www.owasp.org/index.php/Testing_for_Brute_Force_%28OWASP-AT-004%29 https\://www.owasp.org/index.php/Category\:Authentication_Vulnerability http\://en.wikipedia.org/wiki/Digest_access_authentication
pscanbeta.authenticationcredentialscaptured.alert.basicauth.extrainfo=[{0}] [{1}] utilizza un meccanismo di autenticazione insicuro [{2}], rivelando username [{3}] e password [{4}].
pscanbeta.authenticationcredentialscaptured.alert.digestauth.extrainfo=[{0}] [{1}] utilizza il meccanismo di autenticazione insicuro [{2}], rivelando username [{4}] ed informazioni aggiuntive [{3}].
pscanbeta.authenticationcredentialscaptured.alert.attack=L'attaccante sniffa la rete finch\u00e9 l'autenticazione \u00e8 completata.

pscanbeta.charsetmismatch.name=Charset Mismatch
pscanbeta.charsetmismatch.desc=This check identifies responses where the HTTP Content-Type header declares a charset different from the charset defined by the body of the HTML or XML. When there's a charset mismatch between the HTTP header and content body Web browsers can be forced into an undesirable content-sniffing mode to determine the content's correct character set.
pscanbeta.charsetmismatch.soln=Force UTF-8 for all text content in both the HTTP header and meta tags or encoding declarations in XML.
pscanbeta.charsetmismatch.exploit=An attacker could manipulate content on the page to be interpreted in an encoding of their choice. For example, if an attacker can control content at the beginning of the page, they could inject script using UTF-7 encoded text and manipulate some browsers into interpreting that text.
pscanbeta.charsetmismatch.refs=http\://code.google.com/p/browsersec/wiki/Part2\#Character_set_handling_and_detection
pscanbeta.charsetmismatch.extrainfo.html=There was a charset mismatch between the HTTP Header and the HTML encoding declaration\: [{0}] and [{1}] do not match.
pscanbeta.charsetmismatch.extrainfo.xml=There was a charset mismatch between the HTTP Header and the XML encoding declaration\: [{0}] and [{1}] do not match.

pscanbeta.cookielooselyscoped.name=Loosely Scoped Cookie
pscanbeta.cookielooselyscoped.desc=Cookies can be scoped by domain or path. This check is only concerned with domain scope.The domain scope applied to a cookie determines which domains can access it. For example, a cookie can be scoped strictly to a subdomain e.g. www.nottrusted.com, or loosely scoped to a parent domain e.g. nottrusted.com. In the latter case, any subdomain of nottrusted.com can access the cookie. Loosely scoped cookies are common in mega-applications like google.com and live.com.
pscanbeta.cookielooselyscoped.soln=Always scope cookies to a FQDN (Fully Qualified Domain Name).
pscanbeta.cookielooselyscoped.exploit=Cookies set from a subdomain like app.foo.bar are transmitted only to that domain by the browser. However, cookies scoped to a parent-level domain may be transmitted to the parent, or any subdomain of the parent.
pscanbeta.cookielooselyscoped.refs=http\://code.google.com/p/browsersec/wiki/Part2\#Same-origin_policy_for_cookies
pscanbeta.cookielooselyscoped.extrainfo=The origin domain used for comparison was\: \r\n{0}\r\n{1}
pscanbeta.cookielooselyscoped.extrainfo.cookie={0}\r\n

pscanbeta.insecureauthentication.name=Metodo di Autenticazione Debole
pscanbeta.insecureauthentication.desc=HTTP di base o autenticazione digest sono state utilizzate su una connessione non sicura. Le credenziali possono essere lette e successivamente riutilizzate da qualcuno che ha accesso alla rete.
pscanbeta.insecureauthentication.soln=Proteggi la connessione utilizzando HTTPS oppure utilizzando un meccanismo di autenticazione forte
pscanbeta.insecureauthentication.refs=www.owasp.org/index.php/Category\:Authentication_Vulnerability

pscanbeta.insecurejsfviewstate.name=JSF ViewState non sicuro
pscanbeta.insecurejsfviewstate.desc=La risposta alla seguente URL contiene un valore di ViewState che non ha protezioni crittografiche.
pscanbeta.insecurejsfviewstate.soln=Proteggi VIEWSTATE con un MAC specifico per il tuo ambiente
pscanbeta.insecurejsfviewstate.refs=https\://www.trustwave.com/spiderlabs/advisories/TWSL2010-001.txt
pscanbeta.insecurejsfviewstate.extrainfo=JSF ViewState [{0}] \u00e8 insicuro

pscanbeta.noanticsrftokens.name=Assenza di Token Anti-CSRF
pscanbeta.noanticsrftokens.desc=Nessun Token Anti-CSRF \u00e8 stato trovato nel form HTML.
pscanbeta.noanticsrftokens.alert.attack=Niente. Solo Avvisi.
pscanbeta.noanticsrftokens.alert.extrainfo=Nessun Token Anti-CSRF {0} \u00e8 stato trovato nel seguente form HTML\: {1}.  
