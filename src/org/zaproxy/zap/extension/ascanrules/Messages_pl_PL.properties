#X-Generator: crowdin.net
# This file defines the default (English) variants of all of the internationalised messages

ascanrules.rxss.name=Cross Site Scripting (Reflected)

ascanrules.sqlinjection.name=SQL Injection
ascanrules.sqlinjection.desc=SQL injection mo\u017ce by\u0107 mo\u017cliwy
ascanrules.sqlinjection.soln=Do not trust client side input, even if there is client side validation in place.  In general,\nType check all data on the server side.\nIf the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'\nIf the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.\nIf database Stored Procedures can be used, use them.  Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality\!\nDo not create dynamic SQL queries using simple string concatenation.\nEscape all data received from the client.\nApply a 'whitelist' of allowed characters, or a 'blacklist' of disallowed characters in user input.\nApply the privilege of least privilege by\nusing the lease privileged database user possible. In particular, avoid using the 'sa' or 'db-owner' users. This does not eliminate SQL injection, but minimizes its impact.\ngranting the minimum database access that is necessary for the application.
ascanrules.sqlinjection.refs=https\://www.owasp.org/index.php/Top_10_2010-A1\nhttps\://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
ascanrules.sqlinjection.alert.errorbased.attack=[{0}] pole\: [{1}], warto\u015b\u0107 [{2}]
ascanrules.sqlinjection.alert.errorbased.differentiation.attack=Original Value\: [{0}]. Modified Value\: [{1}]. Control Value\: [{2}]
ascanrules.sqlinjection.alert.booleanbased.attack=[{0}] pole\: [{1}], warto\u015b\u0107 [{2}]
ascanrules.sqlinjection.alert.unionbased.attack=[{0}] pole\: [{1}], warto\u015b\u0107 [{2}]
ascanrules.sqlinjection.alert.errorbased.extrainfo=RDBMS [{0}] likely, given error message fragment [{1}] in HTML results
ascanrules.sqlinjection.alert.unionbased.extrainfo=RDBMS [{0}] likely, given UNION-specific message fragment [{1}] in HTML results
ascanrules.sqlinjection.alert.errorbased.httpstatuscode.extrainfo=Unmodified message gave HTTP status [{0}], modified message gave HTTP status [{1}]
ascanrules.sqlinjection.alert.errorbased.differentiation.extrainfo=Unmodified message gave HTTP status [{0}], body of length [{1}], modified message gave HTTP status [{2}], body of length [{3}]. A third (non-SQL injection inducing value) gave HTTP status [{4}], body of length [{5}]
ascanrules.sqlinjection.alert.booleanbased.extrainfo=The page results were successfully manipulated using the boolean conditions [{0}] and [{1}]
ascanrules.sqlinjection.alert.timebased.extrainfo=The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, when the original unmodified query with value [{2}] took [{3}] milliseconds 

