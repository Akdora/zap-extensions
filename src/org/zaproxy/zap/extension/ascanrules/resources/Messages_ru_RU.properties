#X-Generator: crowdin.com
# This file defines the default (English) variants of all of the internationalised messages

ascanrules.desc=Active Scan Rules

ascanrules.clientbrowsercache.desc=Secure page can be cached in browser.  Cache control is not set in HTTP header nor HTML header.  Sensitive content can be recovered from browser storage.
ascanrules.clientbrowsercache.name=Secure page browser cache
ascanrules.clientbrowsercache.ref=How to prevent caching in Internet Explorer - http\://support.microsoft.com/default.aspx?kbid\=234067\n\nPragma\: No-cache Tag May Not Prevent Page from Being Cached - http\://support.microsoft.com/default.aspx?kbid\=222064
ascanrules.clientbrowsercache.solution=The best way is to set HTTP header with\: 'Pragma\: No-cache' and 'Cache-control\: No-cache'. \n\nAlternatively, this can be set in the HTML header by\: \n\n<META HTTP-EQUIV\='Pragma' CONTENT\='no-cache'> \n\n<META HTTP-EQUIV\='Cache-Control' CONTENT\='no-cache'> \n\nbut some browsers may have problem using this method.

ascanrules.cmdinjection.name=Remote OS Command Injection Plugin
ascanrules.cmdinjection.desc=Attack technique used for unauthorized execution of operating system commands. This attack is possible when an application accepts untrusted input to build operating system commands in an insecure manner involving improper data sanitization, and/or improper calling of external programs.

ascanrules.rxss.name=Cross Site Scripting (\u043e\u0442\u0440\u0430\u0436\u0451\u043d\u043d\u044b\u0439)

ascanrules.pxss.attack.name=Cross Site Scripting (Persistent)
ascanrules.pxss.otherinfo=Source URL\: {0}
ascanrules.pxss.prime.name=Cross Site Scripting (Persistent) - Prime
ascanrules.pxss.spider.name=Cross Site Scripting (Persistent) - Spider

ascanrules.sqlinjection.name=SQL-\u0438\u043d\u044a\u0435\u043a\u0446\u0438\u044f
ascanrules.sqlinjection.desc=\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u0430 SQL-\u0438\u043d\u044a\u0435\u043a\u0446\u0438\u044f
ascanrules.sqlinjection.soln=Do not trust client side input, even if there is client side validation in place.  \nIn general, type check all data on the server side.\nIf the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'\nIf the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.\nIf database Stored Procedures can be used, use them.\nDo *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality\!\nDo not create dynamic SQL queries using simple string concatenation.\nEscape all data received from the client.\nApply a 'whitelist' of allowed characters, or a 'blacklist' of disallowed characters in user input.\nApply the privilege of least privilege by using the least privileged database user possible.\nIn particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.\nGrant the minimum database access that is necessary for the application.
ascanrules.sqlinjection.refs=https\://www.owasp.org/index.php/Top_10_2010-A1\nhttps\://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
ascanrules.sqlinjection.alert.errorbased.attack=[{0}] \u043f\u043e\u043b\u0435\: [{1}] \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 [{2}]
ascanrules.sqlinjection.alert.errorbased.differentiation.attack=\u0418\u0441\u0445\u043e\u0434\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\: [{0}]. \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\: [{1}]. \u041a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\: [{2}]
ascanrules.sqlinjection.alert.booleanbased.attack=[{0}] \u043f\u043e\u043b\u0435\: [{1}] \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 [{2}]
ascanrules.sqlinjection.alert.unionbased.attack=[{0}] \u043f\u043e\u043b\u0435\: [{1}] \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 [{2}]
ascanrules.sqlinjection.alert.errorbased.extrainfo=RDBMS [{0}] likely, given error message regular expression [{1}] matched by the HTML results.\nThe vulnerability was detected by manipulating the parameter to cause a database error message to be returned and recognised
ascanrules.sqlinjection.alert.unionbased.extrainfo=RDBMS [{0}] likely, given UNION-specific error message regular expression [{1}] matched by the HTML results\nThe vulnerability was detected by manipulating the parameter with an SQL ''UNION'' clause to cause a database error message to be returned and recognised
ascanrules.sqlinjection.alert.expressionbased.extrainfo=The original page results were successfully replicated using the expression [{0}] as the parameter value\nThe parameter value being modified was {1}stripped from the HTML output for the purposes of the comparison
ascanrules.sqlinjection.alert.orderbybased.extrainfo=The original page results were successfully replicated using the "ORDER BY" expression [{0}] as the parameter value\nThe parameter value being modified was {1}stripped from the HTML output for the purposes of the comparison
ascanrules.sqlinjection.alert.errorbased.httpstatuscode.extrainfo=\u041d\u0435\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432\u0435\u0440\u043d\u0443\u043b\u043e \u0441\u0442\u0430\u0442\u0443\u0441 HTTP [{0}], \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432\u0435\u0440\u043d\u0443\u043b\u043e \u0441\u0442\u0430\u0442\u0443\u0441 HTTP [{1}]
ascanrules.sqlinjection.alert.errorbased.differentiation.extrainfo=\u041d\u0435\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432\u0435\u0440\u043d\u0443\u043b\u043e \u0441\u0442\u0430\u0442\u0443\u0441 HTTP [{0}], \u0440\u0430\u0437\u043c\u0435\u0440 \u0442\u0435\u043b\u0430 [{1}], \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432\u0435\u0440\u043d\u0443\u043b\u043e \u0441\u0442\u0430\u0442\u0443\u0441 HTTP [{2}], \u0440\u0430\u0437\u043c\u0435\u0440 \u0442\u0435\u043b\u0430 [{3}]. \u0422\u0440\u0435\u0442\u044c\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 (\u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c, \u043d\u0435 \u0432\u044b\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u043c SQL \u0438\u043d\u044a\u0435\u043a\u0446\u0438\u044e) \u0432\u0435\u0440\u043d\u0443\u043b\u043e \u0441\u0442\u0430\u0442\u0443\u0441 HTTP [{4}], \u0440\u0430\u0437\u043c\u0435\u0440 \u0442\u0435\u043b\u0430 [{5}]
ascanrules.sqlinjection.alert.booleanbased.extrainfo=The page results were successfully manipulated using the boolean conditions [{0}] and [{1}]\nThe parameter value being modified was {2}stripped from the HTML output for the purposes of the comparison
ascanrules.sqlinjection.alert.booleanbased.extrainfo.dataexists=Data was returned for the original parameter.\nThe vulnerability was detected by successfully restricting the data originally returned, by manipulating the parameter
ascanrules.sqlinjection.alert.booleanbased.extrainfo.datanotexists=Data was NOT returned for the original parameter.\nThe vulnerability was detected by successfully retrieving more data than originally returned, by manipulating the parameter
ascanrules.sqlinjection.alert.timebased.extrainfo=\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 [{0}], \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u043b\u0441\u044f [{1}] \u043c\u0438\u043b\u043b\u0438\u0441\u0435\u043a\u0443\u043d\u0434, \u0432 \u0442\u043e\u043c \u0432\u0440\u0435\u043c\u044f \u043a\u0430\u043a \u0434\u043b\u044f \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c [{2}] \u0437\u0430\u043f\u0440\u043e\u0441 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u043b\u0441\u044f [{3}] \u043c\u0438\u043b\u043b\u0438\u0441\u0435\u043a\u0443\u043d\u0434 
ascanrules.sqlinjection.authbypass.name=SQL Injection - Authentication Bypass
ascanrules.sqlinjection.authbypass.desc=SQL injection may be possible on a login page, potentially allowing the application's authentication mechanism to be bypassed 

ascanrules.extredirect.reason.location.header=The response contains a redirect in its Location header which allows an external Url to be set.
ascanrules.extredirect.reason.location.meta=The response contains a redirect in its meta http-equiv tag for 'Location' which allows an external Url to be set.
ascanrules.extredirect.reason.refresh.header=The response contains a redirect in its Refresh header which allows an external Url to be set.
ascanrules.extredirect.reason.refresh.meta=The response contains a redirect in its meta http-equiv tag for 'Refresh' which allows an external Url to be set.
ascanrules.extredirect.reason.javascript=The response contains a redirect in its JavaScript code which allows an external Url to be set.
ascanrules.extredirect.reason.notfound=No reason found for it...

