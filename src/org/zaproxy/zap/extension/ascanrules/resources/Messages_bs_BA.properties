#X-Generator: crowdin.com
# This file defines the default (English) variants of all of the internationalised messages

ascanrules.desc=Activna Sken Pravila

ascanrules.clientbrowsercache.desc=Sigurna stranica se mo\u017ee ke\u0161irati u pregledniku. Ke\u0161 kontrola nije postavljena u HTTP zaglavlju niti u HTML zaglavlju. Osjetljivi sadr\u017eaj mo\u017ee se vratiti iz skladi\u0161ta preglednika.
ascanrules.clientbrowsercache.name=Ke\u0161 sigurne stranice preglednika
ascanrules.clientbrowsercache.ref=Kako sprije\u010diti ke\u0161iranje u Internet Explorer - http\://support.microsoft.com/default.aspx?kbid\=234067\n\nPragma\: No-cache Tag Mo\u017eda Ne Mo\u017ee Sprije\u010diti Stranicu Od Ke\u0161iranja - http\://support.microsoft.com/default.aspx?kbid\=222064
ascanrules.clientbrowsercache.solution=Najbolji na\u010din je postaviti HTTP header na\: 'Pragma\: No-cache' i 'Cache-control\: No-cache'. \n\nAlternativno, ovo se mo\u017ee podesiti u HTML zaglavlju preko\: \n\n<META HTTP-EQUIV\='Pragma' CONTENT\='no-cache'> \n\n<META HTTP-EQUIV\='Cache-Control' CONTENT\='no-cache'> \n\nali neki pretra\u017eiva\u010di mogu imati problem kori\u0161tenja ovog metoda.

ascanrules.cmdinjection.name=Remote OS Command Injection Dodatak
ascanrules.cmdinjection.desc=Tehnika napada kori\u0161tena za neautorizirano izvr\u0161avanjem komandi operativnog sistema. Ovaj napad je mogu\u0107 kada aplikacija prihvata neprovjerene ulaze za kreiranje komandi operativnog sistema na nesiguran na\u010din koji uklju\u010duje nedopu\u0161tenu provjeru podataka, i / ili nepravilnog poziva vanjskih programa.

ascanrules.rxss.name=Cross Site Scripting (Reflected)

ascanrules.pxss.attack.name=Cross Site Scripting (Stalni)
ascanrules.pxss.otherinfo=Izvorni URL\: {0}
ascanrules.pxss.prime.name=Cross Site Scripting (Stalni) - Glavni
ascanrules.pxss.spider.name=Cross Site Scripting (Stalni) - Pauk

ascanrules.sqlinjection.name=SQL Injection
ascanrules.sqlinjection.desc=SQL injection je mogu\u0107
ascanrules.sqlinjection.soln=Do not trust client side input, even if there is client side validation in place.  \nIn general, type check all data on the server side.\nIf the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'\nIf the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.\nIf database Stored Procedures can be used, use them.\nDo *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality\!\nDo not create dynamic SQL queries using simple string concatenation.\nEscape all data received from the client.\nApply a 'whitelist' of allowed characters, or a 'blacklist' of disallowed characters in user input.\nApply the privilege of least privilege by using the least privileged database user possible.\nIn particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.\nGrant the minimum database access that is necessary for the application.
ascanrules.sqlinjection.refs=https\://www.owasp.org/index.php/Top_10_2010-A1\nhttps\://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
ascanrules.sqlinjection.alert.errorbased.attack=[{0}] field\: [{1}], value [{2}]
ascanrules.sqlinjection.alert.errorbased.differentiation.attack=Original Value\: [{0}]. Modified Value\: [{1}]. Control Value\: [{2}]
ascanrules.sqlinjection.alert.booleanbased.attack=[{0}] polje\: [{1}], vrijednost [{2}]
ascanrules.sqlinjection.alert.unionbased.attack=[{0}] polje\: [{1}], vrijednost [{2}]
ascanrules.sqlinjection.alert.errorbased.extrainfo=RDBMS [{0}] likely, given error message regular expression [{1}] matched by the HTML results.\nThe vulnerability was detected by manipulating the parameter to cause a database error message to be returned and recognised
ascanrules.sqlinjection.alert.unionbased.extrainfo=RDBMS [{0}] likely, given UNION-specific error message regular expression [{1}] matched by the HTML results\nThe vulnerability was detected by manipulating the parameter with an SQL ''UNION'' clause to cause a database error message to be returned and recognised
ascanrules.sqlinjection.alert.expressionbased.extrainfo=The original page results were successfully replicated using the expression [{0}] as the parameter value\nThe parameter value being modified was {1}stripped from the HTML output for the purposes of the comparison
ascanrules.sqlinjection.alert.orderbybased.extrainfo=The original page results were successfully replicated using the "ORDER BY" expression [{0}] as the parameter value\nThe parameter value being modified was {1}stripped from the HTML output for the purposes of the comparison
ascanrules.sqlinjection.alert.errorbased.httpstatuscode.extrainfo=Unmodified message gave HTTP status [{0}], modified message gave HTTP status [{1}]
ascanrules.sqlinjection.alert.errorbased.differentiation.extrainfo=Unmodified message gave HTTP status [{0}], body of length [{1}], modified message gave HTTP status [{2}], body of length [{3}]. A third (non-SQL injection inducing value) gave HTTP status [{4}], body of length [{5}]
ascanrules.sqlinjection.alert.booleanbased.extrainfo=The page results were successfully manipulated using the boolean conditions [{0}] and [{1}]\nThe parameter value being modified was {2}stripped from the HTML output for the purposes of the comparison
ascanrules.sqlinjection.alert.booleanbased.extrainfo.dataexists=Data was returned for the original parameter.\nThe vulnerability was detected by successfully restricting the data originally returned, by manipulating the parameter
ascanrules.sqlinjection.alert.booleanbased.extrainfo.datanotexists=Data was NOT returned for the original parameter.\nThe vulnerability was detected by successfully retrieving more data than originally returned, by manipulating the parameter
ascanrules.sqlinjection.alert.timebased.extrainfo=The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, when the original unmodified query with value [{2}] took [{3}] milliseconds 
ascanrules.sqlinjection.authbypass.name=SQL Injection - Zaobila\u017eenje Autentifikacije
ascanrules.sqlinjection.authbypass.desc=SQL injection mo\u017ee biti mogu\u0107 na login stranici, potencijalno dopu\u0161ta aplikacijskom autentikacijskom mehanizmu da bude zaobi\u0111en\u00a0

ascanrules.extredirect.reason.location.header=The response contains a redirect in its Location header which allows an external Url to be set.
ascanrules.extredirect.reason.location.meta=The response contains a redirect in its meta http-equiv tag for 'Location' which allows an external Url to be set.
ascanrules.extredirect.reason.refresh.header=The response contains a redirect in its Refresh header which allows an external Url to be set.
ascanrules.extredirect.reason.refresh.meta=The response contains a redirect in its meta http-equiv tag for 'Refresh' which allows an external Url to be set.
ascanrules.extredirect.reason.javascript=The response contains a redirect in its JavaScript code which allows an external Url to be set.
ascanrules.extredirect.reason.notfound=Razlozi za to nisu na\u0111eni...

