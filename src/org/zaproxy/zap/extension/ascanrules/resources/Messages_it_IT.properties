#X-Generator: crowdin.com
# This file defines the default (English) variants of all of the internationalised messages

ascanrules.desc=Regole di scansione attiva

ascanrules.clientbrowsercache.desc=La pagina sicura pu\u00f2 essere memorizzata nel browser. Il controllo della cache non \u00e8 impostato nell'intestazione HTTP n\u00e8 nell'impostazione HTML. Il contenuto sensibile pu\u00f2 essere recuperato dallo spazio di memorizzazione del browser.
ascanrules.clientbrowsercache.name=Cache del browser per pagine sicure
ascanrules.clientbrowsercache.ref=Come prevenire la memorizzazione in Internet Explorer - http\://support.microsoft.com/default.aspx?kbid\=234067\n\nL'etichetta Pragma\: No-cache  potrebbe non prevenire la memorizzazione della pagina - \nhttp\://support.microsoft.com/default.aspx?kbid\=222064
ascanrules.clientbrowsercache.solution=Il modo migliore \u00e8 quello di impostare l'intestazione HTTP con\:  'Pragma\: No-cache' e 'Cache-control\: No-cache'. \n\nIn alternativa, questo pu\u00f2 essere impostato nell'intestazione HTML\:\n\n<META HTTP-EQUIV\='Pragma' CONTENT\='no-cache'>\n\n<META HTTP-EQUIV\='Cache-Control' CONTENT\='no-cache'> \n\nma alcuni browsers potrebbe avere problemi con questo metodo.

ascanrules.cmdinjection.name=Componente aggiuntivo per l'iniezione remota di comandi al sistema operativo
ascanrules.cmdinjection.desc=Tecnica di attacco usata per l'esecuzione non autorizzara di comandi del sistema operativo. Questo attacco \u00e8 possibile quando un'applicazione accetta input non fidato per costruire comandi del sistema operativo in modo insicuro coinvolgendo una sanificazione dell'input non corretta e/o la chiamata impropria di comandi esterni.

ascanrules.rxss.name=Cross Site Scripting (riflesso)

ascanrules.pxss.attack.name=Cross Site Scripting (persistente)
ascanrules.pxss.otherinfo=URL sorgente\: {0}
ascanrules.pxss.prime.name=Cross Site Scripting (Persistente) - Primo
ascanrules.pxss.spider.name=Cross Site Scripting (persistente) - ragno

ascanrules.sqlinjection.name=SQL Injection
ascanrules.sqlinjection.desc=SQL injection potrebbe essere possibile
ascanrules.sqlinjection.soln=Non fidarti dell'input utente anche se viene effettuata la validazione client side. In linea generale,\ncontrolla il tipo di tutti i dati a lato server.\nSe l'applicazione utilizza JDBC, usa PreparedStatement o CallableStatement con parametri passati via '?'.\nSe l'applicazione utilizza ASP, usa gli Oggetti ADO Command con controllo tipizzato e query parametrizzate.\nSe lato database possono essere utilizzate Stored Procedures, utilizzale. Non concatenare stringhe in query nelle stored procedure, o utilizzare 'exec', 'exec immediate', o istruzioni equivalenti\!\nNon creare query SQL dinamiche utilizzando la semplice concatenazione delle stringhe.\nSanitizza tutti i dati ricevuti dal client.\nAdotta una 'whitelist' di caratteri permessi, o una 'blacklist' di caratteri non consentiti nell'input utente.\nAdotta il principio del privilegio minimo utilizzando l'utente del database con il minor numero di privilegi possibili.In particolare, evitare di utilizzare il 'sa' o gli utenti 'db-owner'. Questo non eliminer\u00e0 eventuali SQL injection, ma ridurr\u00e0 al minimo il loro impatto.\nConcedi nel database l'accesso minimo necessario al funzionamento dell'applicazione.
ascanrules.sqlinjection.refs=https\://www.owasp.org/index.php/Top_10_2010-A1\nhttps\://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
ascanrules.sqlinjection.alert.errorbased.attack=[{0}] campo\: [{1}], valore [{2}]
ascanrules.sqlinjection.alert.errorbased.differentiation.attack=Valore originale\: [{0}]. valore modificato\: [{1}]. valore di controllo\: [{2}]
ascanrules.sqlinjection.alert.booleanbased.attack=[{0}] campo\: [{1}], valore [{2}]
ascanrules.sqlinjection.alert.unionbased.attack=[{0}] campo\: [{1}], valore [{2}]
ascanrules.sqlinjection.alert.errorbased.extrainfo=RDBMS [{0}] probabile, dato il messaggio d''errore espressione regolare [{1}] eguagliato dai risultati HTML. \u00c8 stata rilevata la vulnerabilit\u00e0 modificando il parametro per causare la restituzione di un messaggio di errore di database ed il suo riconoscimento
ascanrules.sqlinjection.alert.unionbased.extrainfo=RDBMS [{0}] probabile, data un messaggio d''errore specificio di una Union con espressione regolare [{1}] riconosciuto dai risultati HTML. E'' stata rilevata la vulnerabilit\u00e0 modificando il parametro con una clausola di ''Union'' SQL per causare la restituzione di un messaggio di errore di database e il suo riconoscimento
ascanrules.sqlinjection.alert.expressionbased.extrainfo=I risultati della pagina originale sono stati replicati con successo utilizzando l''espressione [{0}] come valore del parametro. Il valore del parametro modificato \u00e8 stato {1} rimosso dall''output HTML per il confronto
ascanrules.sqlinjection.alert.orderbybased.extrainfo=I risultati della pagina originale sono stati replicati con successo utilizzando l''espressione "Order by" [{0}] come valore del parametro. Il valore del parametro modificato \u00e8 stato {1} rimosso dall''output HTML per il confronto
ascanrules.sqlinjection.alert.errorbased.httpstatuscode.extrainfo=Messaggio non modificato ha dato il codice di stato HTTP [{0}], il messaggio modificato ha dato lo stato HTTP [{1}]
ascanrules.sqlinjection.alert.errorbased.differentiation.extrainfo=Messaggio non modificato ha dato il codice di stato HTTP [{0}], corpo di lunghezza [{1}], il messaggio modificato ha dato lo stato HTTP [{2}], corpo di lunghezza [{3}]. Un terzo (valore inducente una non-SQL injection) ha dato lo stato HTTP [{4}], corpo di lunghezza [{5}]
ascanrules.sqlinjection.alert.booleanbased.extrainfo=I risultati della pagina sono stati manipolati con successo utilizzando le condizioni booleane [{0}] e [{1}]. Il valore del parametro da modificare \u00e8 stato {2} rimosso dal codice HTML di output per confronto
ascanrules.sqlinjection.alert.booleanbased.extrainfo.dataexists=Sono stati restituiti dati per il parametro originale. La vulnerabilit\u00e0 \u00e8 stata rilevata restringendo i dati restituiti in origine, manipolando il parametro
ascanrules.sqlinjection.alert.booleanbased.extrainfo.datanotexists=Non sono stati restituiti dati per il parametro originale. La vulnerabilit\u00e0 \u00e8 stata rilevata restringendo i dati restituiti in origine, manipolando il parametro
ascanrules.sqlinjection.alert.timebased.extrainfo=Il tempo di query \u00e8 controllabile tramite il valore del parametro [{0}], che ha causato l''impiego di [{1}] millisecondi per la richiesta, quando la query originale non modificata con valore [{2}] ha impiegato [{3}] millisecondi 
ascanrules.sqlinjection.authbypass.name=Iniezione SQL - aggiramento dell'autenticazione
ascanrules.sqlinjection.authbypass.desc=Iniezione SQL pu\u00f2 essere possibile su una pagina di login, consentendo potenzialmente di aggirare il meccanismo di autenticazione dell'applicazione 

ascanrules.extredirect.reason.location.header=La risposta contiene un redirect nella sua intestazione Location che permette di impostare un Url esterno.
ascanrules.extredirect.reason.location.meta=La risposta contiene un redirect nel tag meta http-equiv per 'Location', che permette di impostare un Url esterno.
ascanrules.extredirect.reason.refresh.header=La risposta contiene un redirect nella sua intestazione "Refresh" che permette di impostare un Url esterno.
ascanrules.extredirect.reason.refresh.meta=La risposta contiene un redirect nel tag meta http-equiv per 'Refresh', che permette di impostare un Url esterno.
ascanrules.extredirect.reason.javascript=La risposta contiene un redirect nel suo codice JavaScript che permette di impostare un Url esterno.
ascanrules.extredirect.reason.notfound=Nessun motivo trovato...

