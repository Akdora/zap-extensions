#X-Generator: crowdin.com
# ascanalphaAlpha 
#
# This file defines the default (English) variants of all of the internationalised messages
ascanalpha.desc=Regole di scansione attive - alfa

ascanalpha.examplefile.name=Un  esempio di regola di scansione attiva che carica dati da un file
ascanalpha.examplefile.desc=Aggiungere qui maggiori informazioni sulla vulnerabilit\u00e0
ascanalpha.examplefile.other=Questa sezione \u00e8 per informazioni che non rientrano in nessuna altra sezione
ascanalpha.examplefile.soln=Una descrizione generale di come risolvere il problema
ascanalpha.examplefile.refs=http\://zaproxy.blogspot.co.uk/2014/04/hacking-zap-4-active-scan-rules.html

ascanalpha.sourcecodedisclosure.desc=Il codice sorgente della pagina attuale \u00e8 stato rivelato dal server web
ascanalpha.sourcecodedisclosure.lfibased.name=Divulgazione di codice sorgente - inclusione di File
ascanalpha.sourcecodedisclosure.lfibased.soln=Assicurarsi che file specificati dall'utente non siano inclusi nell'output
ascanalpha.sourcecodedisclosure.lfibased.extrainfo=L''output per il nome del file di codice sorgente [{0}] differisca sufficientemente da quello del parametro casuale [{1}], [{2}%], rispetto ad una soglia di [{3}%]
ascanalpha.sourcecodedisclosure.lfibased.evidence=

ascanalpha.sourcecodedisclosure.gitbased.name=Divulgazione di codice sorgente - Git 
ascanalpha.sourcecodedisclosure.gitbased.soln=Assicurarsi che i file di metadati Git non vengono distribuiti sul web server o sul server applicativo
ascanalpha.sourcecodedisclosure.gitbased.extrainfo=
ascanalpha.sourcecodedisclosure.gitbased.evidence=Il codice sorgente per [{0}] \u00e8 stato estratto utilizzando [{1}]

ascanalpha.elinjection.name=Iniezione dell'espressione in linguaggio
ascanalpha.elinjection.desc=Il software costruisce tutto o una parte di un'istruzione di expression language (EL) in una pagina Java Server Page (JSP)utilizzando input influenzato esternamente da un componente a monte, ma non neutralizza, o lo fa in maniera incorretta, gli elementi speciali che potrebbero modificare l'istruzione EL originariamente prevista da eseguire. In alcune versioni di Spring 3.0.5 e precedenti, era presente una vulnerabilit\u00e0 (CVE-2011-2730) per la quale i tag EL sarebbero stati valutati due volte, che avrebbe veramente esposto qualsiasi applicazione all'iniezione EL. Tuttavia, anche per le versioni successive, questo problema \u00e8 ancora presente a seconda della configurazione in uso.
ascanalpha.elinjection.soln=Assicurarsi di seguire le migliori tecniche di validazione di dati verso input non attendibile anche per assicurarsi che la codifica dell'output sia applicata quando i dati arrivano allo strato EL, affinch\u00e8 nessun metacarattere sia trovato dall'interprete all'interno del contenuto generato dall'utente prima della valutazione. I modelli pi\u00f9 ovvi da rilevare includono ${\# {, ma pu\u00f2 essere possibile codificare o frammentare questi dati.
ascanalpha.elinjection.refs=https\://www.OWASP.org/index.php/Expression_Language_Injection http\://cwe.mitre.org/data/definitions/917.html

ascanalpha.cookieslack.name=Rilevatore di Cookie Slack
ascanalpha.cookieslack.desc=Ripetute richieste GET\: eliminare un cookie diverso ogni volta, seguita da una richiesta normale con tutti i cookie per stabilizzare la sessione, confrontare le risposte contro l'originale GET. Questo pu\u00f2 rivelare aree dove l'autenticazione e gli attributi basati sui cookie non vengono effettivamente applicati.
ascanalpha.cookieslack.solution=N.d.
ascanalpha.cookieslack.otherinfo.intro=I biscotti che non hanno effetti attesi possono rivelare difetti nella logica dell'applicazione. Nel peggiore dei casi, questo pu\u00f2 rivelare dove l'autenticazione tramite cookie token(s) non viene effettivamente applicata.\n
ascanalpha.cookieslack.session.warning=Nota\: A causa del suo nome, questo cookie pu\u00f2 essere importante, ma rimuoverlo sembra non avere alcun effetto\: [{0}] \n
ascanalpha.cookieslack.affect.response.yes=Questi cookie hanno influenzato la risposta\: 
ascanalpha.cookieslack.affect.response.no=Questi cookie non hanno influenzato la risposta\: 
ascanalpha.cookieslack.session.destroyed=Eliminare questo cookie sembra avere invalidato la sessione\: [{0}] Una richiesta di proseguimento con tutti i cookie originali aveva ancora una risposta diversa rispetto alla richiesta originale. \n
ascanalpha.cookieslack.separator=,
ascanalpha.cookieslack.endline=\n

ascanalpha.httpsashttpscanner.name=Contenuti HTTPS disponibili via HTTP
ascanalpha.httpsashttpscanner.desc=Contenuto che \u00e8 stato inizialmente accessibile tramite HTTPS (ad esempio\: utilizzando la crittografia SSL/TLS) \u00e8 accessibile anche via HTTP (senza crittografia). 
ascanalpha.httpsashttpscanner.soln=Assicurarsi che il server web, il server applicativo, il bilanciamento del carico, etc siano configurati per servire contenuti solo tramite HTTPS. Si consideri l'implementazione di HTTP Strict Transport Security.
ascanalpha.httpsashttpscanner.refs=https\://www.OWASP.org/index.php/HTTP_Strict_Transport_Security https\://www.owasp.org/index.php/List_of_useful_HTTP_headers http\://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security http\://caniuse.com/stricttransportsecurity http\://tools.ietf.org/html/rfc6797

ascanalpha.sqlinjection.sqlite.name=Iniezione SQL - SQLite
ascanalpha.sqlinjection.desc=Una iniezione SQL potrebbe essere possibile
ascanalpha.sqlinjection.soln=Non ci si fidi dell'input utente anche se viene effettuata la validazione client side. In linea generale,\nsi controlli il tipo di tutti i dati a lato server.\nSe l'applicazione utilizza JDBC, si usi PreparedStatement o CallableStatement con parametri passati via '?'.\nSe l'applicazione utilizza ASP, si usino gli Oggetti ADO Command con controllo tipizzato e query parametrizzate.\nSe lato database possono essere utilizzate Stored Procedures, le si usino. Non si concatenino stringhe in query nelle stored procedure, o utilizzi 'exec', 'exec immediate', o istruzioni equivalenti\!\nNon si creino query SQL dinamiche utilizzando la semplice concatenazione delle stringhe.\nSi sanitizzino tutti i dati ricevuti dal client.\nSi adotti una 'whitelist' di caratteri permessi, o una 'blacklist' di caratteri non consentiti nell'input utente.\nSi adotti il principio del privilegio minimo utilizzando l'utente del database con il minor numero di privilegi possibili.In particolare, si eviti di utilizzare il 'sa' o gli utenti 'db-owner'. Questo non eliminer\u00e0 eventuali SQL injection, ma ridurr\u00e0 al minimo il loro impatto.\nSi conceda nel database l'accesso minimo necessario al funzionamento dell'applicazione.
ascanalpha.sqlinjection.refs=https\://www.owasp.org/index.php/Top_10_2010-A1\nhttps\://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
ascanalpha.sqlinjection.sqlite.alert.timebased.extrainfo=Il tempo di query \u00e8 controllabile utilizzando il valore del parametro [{0}], il quale ha causato l''impiego di [{1}] millisecondi per completare la richiesta, il valore del parametro [{2}], che ha causato l''impiego di [{3}] millisecondi, quando la query originale non modificatacon valore [{4}] ha impiegato [{5}] millisecondi.
ascanalpha.sqlinjection.sqlite.alert.errorbased.extrainfo=Il messaggio di errore conosciuto di SQLite \u00e8 stato causato\: [{0}].
ascanalpha.sqlinjection.sqlite.alert.versionnumber.extrainfo=Utilizzando un attacco Iniezione SQL basato su di una Unione, e sfruttando il meccanismo di tipizzazione dinamica di SQLite, la versione di SQLite \u00e8 stata determinata essere [{0}]. Con punti di iniezione basati su stringa, le informazioni complete di versione di SQLite possono essere estratte, ma con punti di iniezione numerico, possono essere estratte solo parziali informazioni sulla versione di SQLite. Ulteriori informazioni sulla versione di SQLite [{0}] sono disponibili presso http\://www.sqlite.org/changes.html

