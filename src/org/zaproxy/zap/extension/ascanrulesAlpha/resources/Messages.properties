# ascanalphaAlpha 
#
# This file defines the default (English) variants of all of the internationalised messages
ascanalpha.desc = Active Scan Rules - alpha

ascanalpha.examplefile.name=An example active scan rule which loads data from a file
ascanalpha.examplefile.desc=Add more information about the vulnerability here
ascanalpha.examplefile.other=This is for information that doesnt fit in any of the other sections
ascanalpha.examplefile.soln=A general description of how to solve the problem
ascanalpha.examplefile.refs=http://zaproxy.blogspot.co.uk/2014/04/hacking-zap-4-active-scan-rules.html

ascanalpha.sourcecodedisclosure.desc = The source code for the current page was disclosed by the web server
ascanalpha.sourcecodedisclosure.lfibased.name = Source Code Disclosure - File Inclusion
ascanalpha.sourcecodedisclosure.lfibased.soln = Ensure that arbitrary files specified by the user are not included in the output
ascanalpha.sourcecodedisclosure.lfibased.extrainfo = The output for the source code filename [{0}] differs sufficiently from that of the random parameter [{1}], at [{2}%], compared to a threshold of [{3}%]
ascanalpha.sourcecodedisclosure.lfibased.evidence = 

ascanalpha.sourcecodedisclosure.gitbased.name = Source Code Disclosure - Git 
ascanalpha.sourcecodedisclosure.gitbased.soln = Ensure that Git metadata files are not deployed to the web server or application server
ascanalpha.sourcecodedisclosure.gitbased.extrainfo =  
ascanalpha.sourcecodedisclosure.gitbased.evidence = The source code for [{0}] was extracted using [{1}]

ascanalpha.elinjection.name = Expression Language Injection
ascanalpha.elinjection.desc = The software constructs all or part of an expression language (EL) statement in a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed. In certain versions of Spring 3.0.5 and earlier, there was a vulnerability (CVE-2011-2730) in which Expression Language tags would be evaluated twice, which effectively exposed any application to EL injection. However, even for later versions, this weakness is still possible depending on configuration.
ascanalpha.elinjection.soln = Perform data validation best practice against untrusted input and to ensure that output encoding is applied when data arrives on the EL layer, so that no metacharacter is found by the interpreter within the user content before evaluation. The most obvious patterns to detect include ${ and #{, but it may be possible to encode or fragment this data.
ascanalpha.elinjection.refs = https://www.owasp.org/index.php/Expression_Language_Injection\nhttp://cwe.mitre.org/data/definitions/917.html

ascanalpha.cookieslack.name = Cookie Slack Detector
ascanalpha.cookieslack.desc = Repeated GET requests: drop a different cookie each time, followed by normal request with all cookies to stabilize session, compare responses against original baseline GET. This can reveal areas where cookie based authentication/attributes are not actually enforced.
ascanalpha.cookieslack.solution = N.a.
ascanalpha.cookieslack.otherinfo.intro = Cookies that don't have expected effects can reveal flaws in application logic. In the worst case, this can reveal where authentication via cookie token(s) is not actually enforced.\n
ascanalpha.cookieslack.session.warning = NOTE: Because of its name this cookie may be important, but dropping it appears to have no effect: [{0}] \n
ascanalpha.cookieslack.affect.response.yes = These cookies affected the response: 
ascanalpha.cookieslack.affect.response.no = These cookies did NOT affect the response: 
ascanalpha.cookieslack.session.destroyed = Dropping this cookie appears to have invalidated the session: [{0}] A follow-on request with all original cookies still had a different response than the original request. \n
ascanalpha.cookieslack.separator = ,
ascanalpha.cookieslack.endline = \n

ascanalpha.shellshock.name = Remote Code Execution - Shell Shock
ascanalpha.shellshock.desc = The server is running a version of the Bash shell that allows remote attackers to execute arbitrary code 
ascanalpha.shellshock.extrainfo = From CVE-2014-6271: GNU Bash through 4.3 processes trailing strings after function definitions in the values of environment variables, which allows remote attackers to execute arbitrary code via a crafted environment, as demonstrated by vectors involving the ForceCommand feature in OpenSSH sshd, the mod_cgi and mod_cgid modules in the Apache HTTP Server, scripts executed by unspecified DHCP clients, and other situations in which setting the environment occurs across a privilege boundary from Bash execution, aka "ShellShock." NOTE: the original fix for this issue was incorrect; CVE-2014-7169 has been assigned to cover the vulnerability that is still present after the incorrect fix.
ascanalpha.shellshock.soln = Update Bash on the server to the latest version
ascanalpha.shellshock.ref = http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-6271\nhttp://www.troyhunt.com/2014/09/everything-you-need-to-know-about.html
ascanalpha.shellshock.timingbased.evidence = Using the attack, a delay of [{0}] milliseconds was induced and detected

ascanalpha.httpsashttpscanner.name = HTTPS Content Available via HTTP
ascanalpha.httpsashttpscanner.desc = Content which was initially accessed via HTTPS (i.e.: using SSL/TLS encryption) is also accessible via HTTP (without encryption). 
ascanalpha.httpsashttpscanner.soln = Ensure that your web server, application server, load balancer, etc. is configured to only serve such content via HTTPS. Consider implementing HTTP Strict Transport Security.
ascanalpha.httpsashttpscanner.refs = https://www.owasp.org/index.php/HTTP_Strict_Transport_Security\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797

ascanalpha.sqlinjection.sqlite.name=SQL Injection - SQLite
ascanalpha.sqlinjection.desc=SQL injection may be possible
ascanalpha.sqlinjection.soln=Do not trust client side input, even if there is client side validation in place. \nIn general, type check all data on the server side.\nIf the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'\nIf the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.\nIf database Stored Procedures can be used, use them.\nDo *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality!\nDo not create dynamic SQL queries using simple string concatenation.\nEscape all data received from the client.\nApply a 'whitelist' of allowed characters, or a 'blacklist' of disallowed characters in user input.\nApply the privilege of least privilege by using the least privileged database user possible.\nIn particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.\nGrant the minimum database access that is necessary for the application.
ascanalpha.sqlinjection.refs=https://www.owasp.org/index.php/Top_10_2010-A1\nhttps://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
ascanalpha.sqlinjection.sqlite.alert.timebased.extrainfo=The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, parameter value [{2}], which caused the request to take [{3}] milliseconds, when the original unmodified query with value [{4}] took [{5}] milliseconds.
ascanalpha.sqlinjection.sqlite.alert.errorbased.extrainfo=The following known SQLite error message was provoked: [{0}].
ascanalpha.sqlinjection.sqlite.alert.versionnumber.extrainfo=Using a UNION based SQL Injection attack, and by exploiting SQLite's dynamic typing mechanism, the SQLite version was determined to be [{0}].\nWith string-based injection points, full SQLite version information can be extracted, but with numeric injection points, only partial SQLite version information can be extracted.\nMore information on SQLite version [{0}] is available at http://www.sqlite.org/changes.html
