#X-Generator: crowdin.net
# This file defines the default (English) variants of all of the internationalised messages


ascanrules.sqlinjection.desc=SQL-Injection k\u00f6nnte m\u00f6glich sein
ascanrules.sqlinjection.soln=Vertrauen Sie niemals dem User-Input der Client-Seite, da dieser manipuliert sein k\u00f6nnte. Client-seitige Input Validierung kann stets umgangen werden. Grunds\u00e4tzlich sollte die Validierung des User-Inputs immer auf der Server-Seite stattfinden.\n\nFalls die Anwendung JDBC verwendet, sollten Prepared Statements oder Callable Statements verwendet werden, deren Parameter mit '?' \u00fcbergeben werden.\n\nWenn die Anwendung ASP verwendet, sollten ADO Command Objects mit strikter Typen-\u00dcberpr\u00fcfung und parameterisierte Abfragen verwendet werden.\n\nFalls Stored Procedures f\u00fcr Datenbankabfragen genutzt werden k\u00f6nnen, sollte dies auch umgesetzt werden. Auf das Zusammenbauen eines SQL-Statements via Aneinanderreihung von Strings, sollte in jedem Fall verzichtet werden. Auch die Verwendung von 'exec', 'exec immediate' oder \u00e4hnlichen Funktionen sollte immer vermieden werden.\n\nGef\u00e4hrliche Zeichen im User-Input sollten immer durch Escapen unsch\u00e4dlich gemacht werden. Ausserdem ist es ratsam, eine Whitelist mit erlaubten Zeichen oder eine Blacklist mit verbotenen Zeichen zu pflegen und die Benutzer-Eingaben strikt gegenzupr\u00fcfen.\n\nDes Weiteren sollte f\u00fcr den Prozess-User und f\u00fcr den Datenbankzugang das Least-Privilege Prinzip angewendet werden. Insbesondere die Benuzter 'sa' oder 'db-owner' sollten nicht verwendet werden.\n\nDiese Massnahme eliminiert zwar SQL Injection nicht, minimiert jedoch allf\u00e4llige Auswirkungen.\n\nDar\u00fcber hinaus ist es wichtig, der Applikation so wenig Rechte wie m\u00f6glich auf der Datenbank einzur\u00e4umen.
ascanrules.sqlinjection.alert.errorbased.attack=[{0}] Feld\: [{1}], Wert [{2}]
ascanrules.sqlinjection.alert.errorbased.differentiation.attack=Originalwert\: [{0}]. Ver\u00e4nderter Wert\: [{1}]. Kontrollwert\: [{2}]
ascanrules.sqlinjection.alert.booleanbased.attack=[{0}] Feld\: [{1}], Wert [{2}]
ascanrules.sqlinjection.alert.unionbased.attack=[{0}] Feld\: [{1}], Wert [{2}]
ascanrules.sqlinjection.alert.errorbased.extrainfo=RDBMS [{0}] wahrscheinlich, da das Fehlermeldungsfragment [{1}] in den HTML-Ergebnissen aufgetaucht ist
ascanrules.sqlinjection.alert.unionbased.extrainfo=RDBMS [{0}] wahrscheinlich, da \u00fcbergebenes UNION message fragment [{1}] in den HTML-Ergebnissen aufgetaucht ist
ascanrules.sqlinjection.alert.errorbased.httpstatuscode.extrainfo=Unver\u00e4nderte Nachricht ergab HTTP-Status [{0}], ver\u00e4nderte Nachricht ergab HTTP-Status [{1}]
ascanrules.sqlinjection.alert.errorbased.differentiation.extrainfo=Unver\u00e4nderte Nachricht gab HTTP-Status [{0}], Body-Gr\u00f6\u00dfe [{1}], ge\u00e4ndert Nachricht gab HTTP-Status [{2}], Body-Gr\u00f6\u00dfe [{3}]. Eine dritte (nicht-SQL Injektion fehlertr\u00e4chtiger Nachricht) ergab HTTP-Status [{4}], Body-Gr\u00f6\u00dfe [{5}]
ascanrules.sqlinjection.alert.booleanbased.extrainfo=Die resultierende Webseite wurde mit booleschen Bedingungen [{0}] [{1}] erfolgreich manipuliert
ascanrules.sqlinjection.alert.timebased.extrainfo=Die Abfragezeit ist durch Parameterwert [{0}] manipulierbar, was die Zeit f\u00fcr einen Request um [{1}] Millisekunden verl\u00e4ngert hat. Die urspr\u00fcngliche unver\u00e4nderte Abfrage mit Wert [{2}] dauerte [{3}] Millisekunden

